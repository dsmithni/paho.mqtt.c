//==============================================================================
//
// Title:		LabVIEW MQTT
// Purpose:		Wrapper for MQTT3a.
//
// Copyright:	DS. All Rights Reserved.
//
//==============================================================================

//==============================================================================
// Include files

#include "LVMQTT.h"
#include "MQTTAsync.h" 
#include <string.h>
#include <windows.h>

/*
 * Core functions called by LabVIEW
*/

//Creates a new lvmqtt context and a new mqttasync context
int32 LVMQTT_Create(lvmqtt_context ** lvctx, LVUserEventRef * subMsg, LVUserEventRef * disconnect, 
					LVUserEventRef * QoSAck, LVUserEventRef * connSuccess, LVUserEventRef * connFail,
					LVUserEventRef * sendS, LVUserEventRef * sendF, char * serverURI, char * clientID)
{
	
	MQTTAsync mqttc;

	//allocate new context
	lvmqtt_context * lvctxp = (lvmqtt_context *) DSNewPClr(sizeof(lvmqtt_context));
	
	//cache user events in that context
	lvctxp->subMsg=*subMsg;
	lvctxp->disconnect=*disconnect;
	lvctxp->QoSAck=*QoSAck;
	lvctxp->connFail=*connFail;
	lvctxp->connSuccess=*connSuccess;
	lvctxp->sendF=*sendF;
	lvctxp->sendS=*sendS;
	

	//client name validate: it should exist and only be 22 chars long followed by null
	if (!clientID) {
		return MQTTASYNC_BAD_UTF8_STRING;
	}
	if (strlen(clientID) > 23) {
		*(clientID+22)=0;	
	}


    int r = MQTTAsync_create(&mqttc, serverURI, clientID, MQTTCLIENT_PERSISTENCE_NONE, NULL);
	
	//reverse allocations if mqtt library failed
	if (r!=MQTTASYNC_SUCCESS) {
		DSDisposePtr(lvctxp);
		return r;
	}
	
	//cache mqtt handle in lv context
	lvctxp->client = mqttc;

	//pass core callbacks to mqtt library
    r = MQTTAsync_setCallbacks(mqttc, lvctxp, LVMQTT_disconnect, LVMQTT_subMsg, LVMQTT_QoSAck);
	
	//reverse allocations if mqtt library failed
	if (r!=MQTTASYNC_SUCCESS) {
		DSDisposePtr(lvctxp);
		return r;
	}

	//return context to caller
	*lvctx = lvctxp;
	
	return MQTTASYNC_SUCCESS;
	
}


//do we have a current connection?
LVBoolean LVMQTT_IsConnected(lvmqtt_context * lvctx) {
	return MQTTAsync_isConnected(lvctx->client);
}

//Wraps the mqtt connect function for easier labview use.
int32 LVMQTT_Connect(lvmqtt_context * lvctx, int timeout, char * uname, char * pass) {
	
	//allocate structure and cache connection options
	MQTTAsync_connectOptions connectOpts = MQTTAsync_connectOptions_initializer;
	connectOpts.keepAliveInterval = 60;
	if (timeout > 0) { 
		connectOpts.connectTimeout = timeout; 
	}
	else {
		connectOpts.connectTimeout = 0;
	}
    connectOpts.cleansession = 1;
	//cache callbacks
    connectOpts.onSuccess = LVMQTT_connSuccess;
    connectOpts.onFailure = LVMQTT_connFail;
    connectOpts.context = lvctx;
	connectOpts.username = uname;
	connectOpts.password = pass;

	return MQTTAsync_connect(lvctx->client, &connectOpts);
}

//destroy the client and the lv context
int32 LVMQTT_Destroy(lvmqtt_context * lvctx) {
	if (lvctx && lvctx->client) {
		MQTTAsync c = lvctx->client;
		MQTTAsync_destroy(&c);
	}
	//destroy context even if the mqtt client was invalid
	if (lvctx) {
		DSDisposePtr(lvctx);
		return 0;
	}
	return -1;
}

//wrap mqttasync_sendMessage
int32 LVMQTT_Publish(lvmqtt_context * lvctx, char * topic, int32 topiclen, char * msgdata, int32 msglen, int qos) {
    //unwrap client and allocate send options
	MQTTAsync client = lvctx->client;
    MQTTAsync_responseOptions opts = MQTTAsync_responseOptions_initializer;
	MQTTAsync_responseOptions * respOpts = &opts;
    MQTTAsync_message pubmsg = MQTTAsync_message_initializer;
	//store callbacks in option field
    opts.onSuccess = LVMQTTAsync_SendS;
	opts.onFailure = LVMQTTAsync_SendF;
    //when the above callbacks are executed, they need our lvctx
	opts.context = lvctx;

	//cache inputs in mqtt message struct
    pubmsg.payload = msgdata;
    pubmsg.payloadlen = msglen;
    pubmsg.qos = qos;
    pubmsg.retained = 0;


	int r = MQTTAsync_sendMessage(client, topic, &pubmsg, respOpts);
    if (r != MQTTASYNC_SUCCESS) {
		return r;
	}
	else {
		return respOpts->token;
	}
}

//wrap mqttasync_subscribe
int32 LVMQTT_Subscribe(lvmqtt_context * lvctx, char * topic, int qos) {
	//init and cache options
    MQTTAsync_responseOptions opts = MQTTAsync_responseOptions_initializer;
	//store callbacks in option field
    opts.onSuccess = LVMQTTAsync_SendS;
	opts.onFailure = LVMQTTAsync_SendF;
	//when the above callbacks are executed, they need our lvctx
    opts.context = lvctx;

	int rc = MQTTAsync_subscribe(lvctx->client, topic, qos, &opts);
	if (rc != MQTTASYNC_SUCCESS) {
		return rc;
	}
	//mqttasync stores a token in the opts struct
	return opts.token;
	
}


/*
* Callback functions called by MQTT
*/

//called when the client disconnects
void LVMQTT_disconnect(void* context, char* cause) {
	//context passed in should be our lvctx for this client
	if (!context) return;
	lvmqtt_context * ctx = (lvmqtt_context *)context;
	LVUserEventRef devent = ctx->disconnect;

	if (devent) {
		//allocate status message
		//66 is TCP disconnected by peer
		lvmqtt_statusMsg msgdata = { 66, NULL };
		//if it exists, copy 'cause' string into status message
		size_t l = 0;
		if (cause) {
			l = strlen(cause);
		}
		//lvstring is I32Length+Data
		msgdata.data = (LStrHandle)DSNewHandle(sizeof(int32) + l);
		if (msgdata.data) {
			LStrLen(*msgdata.data) = l;
			MoveBlock(cause, LHStrBuf(msgdata.data), l);
			PostLVUserEvent(devent, &msgdata);
		}
		else {
			return -1;
		}
	}
	if (!ctx) return;
	return;
}

//called when a subscribed message comes in
//if we return 1 it means we handled the event and the lib doesn't need to fire it again or store the message
int LVMQTT_subMsg(void* context, char* topicName, int topicLen, MQTTAsync_message* message) {
	if (!context) {
		return 1; //not true, but basically we're saying that if there is no context, we have bigger problems
	}
	if (!message) {
		return 1; //not true, but if there is no message what are we do to?
	}

	LVUserEventRef subMsg = ((lvmqtt_context *)context)->subMsg;
	if (!subMsg) {
		return 1; //not true, but basically we're saying that if there is no event, go ahead and say its correctly fired
	}

	//create event msg and strings for the event
	lvmqtt_subMsg e = { 0, NULL, NULL };
	e.Topic = (LStrHandle)DSNewHandle(sizeof(int32) + topicLen);
	e.MsgData = (LStrHandle)DSNewHandle(sizeof(int32) + message->payloadlen);
	if ((!e.Topic) || (!e.MsgData)) {
		return 0; //allocation failed, tell mqtt to try again later
	}

	//copy message data into event
	e.id = message->msgid;
	if (topicLen == 0 && topicName) {
		topicLen = strlen(topicName);
	}
	LStrLen(*(e.Topic)) = topicLen;
	LStrLen(*(e.MsgData)) = message->payloadlen;

	MoveBlock(topicName, LHStrBuf(e.Topic), topicLen);
	MoveBlock(message->payload, LHStrBuf(e.MsgData), message->payloadlen);

	//now our event is allocated, free the mqtt buffer
	MQTTAsync_freeMessage(&message);
	MQTTAsync_free(topicName);

	MgErr r = PostLVUserEvent(subMsg, &e);
	if (r == mgNoErr) { return 1; }
	return 0;
}

//func called when the mqtt client gets a qos ack from the server
void LVMQTT_QoSAck(void* context, MQTTAsync_token dt) {
	LVUserEventRef qosevent = ((lvmqtt_context *)context)->QoSAck;
	if (qosevent) {
		PostLVUserEvent(qosevent, &dt);
	}
	return;
}

//called when the client successfully connects to the server
void LVMQTT_connSuccess(void* context, MQTTAsync_successData* response) {
	LVUserEventRef csevent = ((lvmqtt_context *)context)->connSuccess;
	if (csevent) {
		//copy response into statusmsg event
		lvmqtt_statusMsg msgdata = { 0, NULL };
		size_t l = 0;
		if (response->alt.connect.serverURI) {
			l = strlen(response->alt.connect.serverURI);
		}
		msgdata.data = (LStrHandle)DSNewHandle(sizeof(int32) + l);
		if (!msgdata.data) {
			return;
		}
		LStrLen(*msgdata.data) = l;
		MoveBlock(response->alt.connect.serverURI, LHStrBuf(msgdata.data), l);


		MgErr r = PostLVUserEvent(csevent, &msgdata);
	}
	return;
}



void LVMQTT_connFail(void* context, MQTTAsync_failureData* response) {
	LVUserEventRef cfevent = ((lvmqtt_context *)context)->connFail;
	if (cfevent) {
		//copy response into statusmsg event
		lvmqtt_statusMsg msgdata = { 0, NULL };
		msgdata.code = response->code;
		size_t l = 0;
		if (response->message) {
			l = strlen(response->message);
		}
		msgdata.data = (LStrHandle)DSNewHandle(sizeof(int32) + l);
		if (!msgdata.data) {
			return;
		}
		LStrLen(*msgdata.data) = l;
		MoveBlock(response->message, LHStrBuf(msgdata.data), l);


		PostLVUserEvent(cfevent, &msgdata);
	}
	return;
}

//callback for any send success
void LVMQTTAsync_SendS(void* context, MQTTAsync_successData* response) {
	LVUserEventRef sendSevent = ((lvmqtt_context *)context)->sendS;
	if (sendSevent) {
		int t = response->token;
		PostLVUserEvent(sendSevent, &t);
	}
	return;
}

//callback for any send failure
void LVMQTTAsync_SendF(void* context, MQTTAsync_failureData* response) {
	LVUserEventRef sendFevent = ((lvmqtt_context *)context)->sendF;
	if (sendFevent) {
		int t = response->token;
		PostLVUserEvent(sendFevent, &t);
	}
	return;
}
